from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from db import add_task
import datetime

router = Router()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")],
        [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ],
    resize_keyboard=True
)

CATEGORIES = ["–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ", "–£—á—ë–±–∞", "–î—Ä—É–≥–æ–µ"]

@router.message(F.text == "–ù–∞—á–∞—Ç—å")
async def show_main_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
class AddTask(StatesGroup):
    waiting_for_text = State()
    waiting_for_due_date = State()
    waiting_for_reminder = State()
    waiting_for_remind_at = State()
    waiting_for_category = State()

@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(AddTask.waiting_for_text)

@router.message(AddTask.waiting_for_text)
async def add_task_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É? (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)")
    await state.set_state(AddTask.waiting_for_due_date)

@router.message(AddTask.waiting_for_due_date)
async def add_task_due_date(message: types.Message, state: FSMContext):
    try:
        due_date = datetime.datetime.strptime(message.text, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        return
    await state.update_data(due_date=due_date.strftime("%Y-%m-%d %H:%M"))
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–î–∞")], [KeyboardButton(text="–ù–µ—Ç")]],
        resize_keyboard=True
    )
    await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? (–î–∞/–ù–µ—Ç)", reply_markup=keyboard)
    await state.set_state(AddTask.waiting_for_reminder)

@router.message(AddTask.waiting_for_reminder)
async def add_task_reminder(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await message.answer("–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)")
        await state.set_state(AddTask.waiting_for_remind_at)
    else:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=cat)] for cat in CATEGORIES],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
        await state.set_state(AddTask.waiting_for_category)

@router.message(AddTask.waiting_for_remind_at)
async def add_task_remind_at(message: types.Message, state: FSMContext):
    try:
        remind_at = datetime.datetime.strptime(message.text, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        return
    await state.update_data(remind_at=remind_at.strftime("%Y-%m-%d %H:%M"))
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=cat)] for cat in CATEGORIES],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    await state.set_state(AddTask.waiting_for_category)

@router.message(AddTask.waiting_for_category)
async def add_task_category(message: types.Message, state: FSMContext):
    category = message.text if message.text in CATEGORIES else "–î—Ä—É–≥–æ–µ"
    data = await state.get_data()
    await add_task(
        user_id=message.from_user.id,
        text=data["text"],
        due_date=data["due_date"],
        remind_at=data.get("remind_at"),
        category=category
    )
    await message.answer("–ó–∞–¥–∞—á–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu)
    await state.clear() 